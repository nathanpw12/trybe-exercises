Agora voc√™ j√° pode esquecer que um dia versionou os arquivos adicionando o nome da vers√£o no final! üòâ
O Git √© um sistema de versionamento distribu√≠do (DVCS);
A maior vantagem do Git √© que ele √© distribu√≠do, ou seja, o reposit√≥rio fica na sua m√°quina e voc√™ n√£o precisa se preocupar em fazer "lock" de arquivos assim como em outros VCS's ;
Vimos que a instala√ß√£o do Git e sua configura√ß√£o s√£o simples. Basta baixar o instalador e configur√°-lo usando o comando git config ;
Para iniciar um reposit√≥rio local, vimos que voc√™ tem duas op√ß√µes:
git init (para criar um novo reposit√≥rio Git ) ;
git clone (para copiar um reposit√≥rio Git existente para sua m√°quina e, assim, poder criar branches e Pull Requests) .
O GitHub √© uma plataforma de hospedagem de c√≥digo-fonte com controle de vers√£o usando o Git;
Vimos tamb√©m que, para subir seu c√≥digo para o GitHub , basta voc√™ verificar qual das op√ß√µes abaixo deseja:
Criar um reposit√≥rio do zero localmente, na sua m√°quina, onde utilizar√° o comando git init ;
Trabalhar num reposit√≥rio j√° existente, onde utilizar√° o comando git clone ;
Esses dois comandos s√£o excludentes , ou seja, voc√™ usa um, ou usa o outro, nunca os dois ao mesmo tempo. Ap√≥s isso, siga um dos dois fluxos abaixo
Fluxo 1 - Ap√≥s git init :
Criar seu primeiro commit ;
Criar o reposit√≥rio remoto na sua conta do GitHub ;
Adicionar a URL do reposit√≥rio remoto;
Executar o famoso push .
Fluxo 2 - Ap√≥s git clone :
Criar sua branch dentro do reposit√≥rio clonado;
Fazer checkout na sua branch;
Criar seu primeiro commit ;
Executar o famoso push .

